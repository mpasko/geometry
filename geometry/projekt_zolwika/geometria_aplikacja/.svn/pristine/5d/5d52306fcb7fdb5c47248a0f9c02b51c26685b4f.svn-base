import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Float;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.SwingUtilities;

class ShapeWrap
{
	public Shape 	shape;
	public String	label;
	public Color	color;
	
	ShapeWrap()
	{
		shape = null;
		label = "";
		color = Color.BLACK;
	}
	
	void Draw(Graphics2D g2)
	{
        g2.setPaint(color);
        g2.fill(shape);
	}
	
	boolean Collision(Point2D p)
	{
		return shape.contains(p);
	}
	
	static final float THRESHHOLD = 2.f;
	
	static Rectangle2D GenerateRectFromPoint(Point2D p, float thr)
	{
		return new Rectangle2D.Float((float)p.getX() - thr/2, (float)p.getY() - thr/2, 
				thr, thr);
	}
	
	ShapeWrap(Shape s)
	{
		shape = s;
		label = "";
		color = Color.BLACK;
	}
}

class LineWrap extends ShapeWrap
{
	LineWrap(Shape s)
	{
		super(s);
	}
	
	LineWrap(Point2D.Float p0, Point2D.Float p1)
	{
		super();
		shape = new Line2D.Float(p0, p1);
	}
	LineWrap(float x0, float y0, float x1, float y1)
	{
		super();
		shape = new Line2D.Float(x0, y0, x1, y1);
	}
	
	void Draw(Graphics2D g2)
	{
        g2.setPaint(color);
        g2.draw(shape);
	}
	
	boolean Collision(Point2D p)
	{
		return shape.intersects(GenerateRectFromPoint(p, THRESHHOLD));
	}
}

public class PlanePanel extends JComponent implements MouseMotionListener, MouseListener, IController {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1379314306499920242L;
	
	private float magnif = 1.0F;
	private int labelGenerator;  
	
	ArrayList<ShapeWrap> 		shapes;
	Mode 						workingMode;
	
	boolean 					changeMade;
	ArrayList<Point2D.Float>	editedPoints;
	Shape 						editedShape;

	private List<PointModel> _all_points;

	private Color currentColor = Color.BLACK;
	
	enum Mode { VIEW, CREATE };
	
	public PlanePanel()
	{
		addMouseListener(this);
		addMouseMotionListener(this);
		shapes = new ArrayList<ShapeWrap>();
		shapes.ensureCapacity(1000);
		
		workingMode = Mode.VIEW;
		
		editedShape = null;
		editedPoints = new ArrayList<Point2D.Float>();
		changeMade = false;
		
		_all_points = new ArrayList<PointModel>();
	}
	
	static Shape GenerateShapeFromPoints(List<Point2D.Float> points)
	{
		if(points.size() == 0) return null;
		if(points.size() <= 2)
		{
			Line2D.Float line = new Line2D.Float();
			line.x1 = points.get(0).x;
			line.y1 = points.get(0).y;
			
			line.x2 = points.get(points.size()-1).x;
			line.y2 = points.get(points.size()-1).y;
			
			return line;
		}
		else
		{
			GeneralPath path = null;
			for(Point2D.Float p : points)
			{
				if(path == null)
				{
					path = new GeneralPath();
					path.moveTo(p.getX(), p.getY());
				}
				else
				{
					path.lineTo(p.getX(), p.getY());
				}
			}
			return path;
		}
	}
	
	public List<Point2D.Float> getPoints(){
		LinkedList<Point2D.Float> ret = new LinkedList<Point2D.Float>();
		for(PointModel model : _all_points){
			ret.add(model.point);
		}
		return ret;
	}

	@Override
    public void paintComponent(Graphics g) {
		super.paintComponent(g);

        Graphics2D g2d = (Graphics2D) g;
        AffineTransform savedTransform = g2d.getTransform();

        for(ShapeWrap sw : shapes)
        {
        	sw.Draw(g2d);
        }
        
        if(workingMode == Mode.CREATE)
        {
	        if(changeMade)
	        	editedShape = GenerateShapeFromPoints(editedPoints);
	        if(editedShape != null)
	        	g2d.draw(editedShape);
        }
        
        for(PointModel point : _all_points){
        	point.Draw(g2d);
        }

        g2d.transform(savedTransform);
        
        /*
        AffineTransform toCenterAt = new AffineTransform();
        toCenterAt.translate(100,100);
        AffineTransform rotateAt = new AffineTransform();
        rotateAt.rotate(Math.PI/4.);
        toCenterAt.concatenate(rotateAt);
        g2d.transform(toCenterAt);
        */
    }
	
	@Override
	public void mouseDragged(MouseEvent e) {
	}

	@Override
	public void mouseMoved(MouseEvent e) { 
        repaint();
	}
	
	boolean HandleCollisions(MouseEvent e)
	{
		for(ShapeWrap sw : shapes)
		{
			if(sw.Collision(e.getPoint()))
			{
				System.out.print("clicked ");
				if(sw.label.equals(""))
					System.out.println("unknown label");
				else
					System.out.println(sw.label);
				
				return true;
			}
		}
		
		return false;
	}
	
	void AddPointToEditedList(Point2D p)
	{
		editedPoints.add(new Point2D.Float((float)p.getX(), (float)p.getY()));
		changeMade = true;
		_all_points.add(new PointModel(p, this.currentColor, new Integer(this.labelGenerator++).toString()));
		System.out.println("point added");
	}
	
	void RemoveLastPointFromList()
	{
		editedPoints.remove(editedPoints.size()-1);
		changeMade = true;
		System.out.println("point removed");
	}
	
	public void CloseEditedShape()
	{
		Shape s = GenerateShapeFromPoints(editedPoints);
		editedPoints = new ArrayList<Point2D.Float>();
		
		if(s instanceof Line2D.Float)
		{
			LineWrap lw = new LineWrap(s);
			lw.color = this.currentColor;
			shapes.add(lw);
		}
		else if(s instanceof GeneralPath)
		{
			((GeneralPath)s).closePath();
			ShapeWrap sw = new ShapeWrap(s);
			sw.color = this.currentColor;
			shapes.add(sw);
		}
		
		System.out.println("shape closed");
	}
	
	@Override
	public void mouseClicked(MouseEvent e) {
		if(workingMode == Mode.VIEW)
		{
			if(!HandleCollisions(e))
			{
				workingMode = Mode.CREATE;
				AddPointToEditedList(e.getPoint());
			}
		}
		else if(workingMode == Mode.CREATE)
		{
			if(SwingUtilities.isLeftMouseButton(e))
				AddPointToEditedList(e.getPoint());
			else if(SwingUtilities.isRightMouseButton(e) && e.isAltDown())
			{
				RemoveLastPointFromList();
				if(editedPoints.isEmpty())
					workingMode = Mode.VIEW;
			}
			else if(SwingUtilities.isRightMouseButton(e))
			{
				CloseEditedShape();
				workingMode = Mode.VIEW;
			}
		}
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void SetColor(Color c) {
		this.currentColor = c;
	}
}
